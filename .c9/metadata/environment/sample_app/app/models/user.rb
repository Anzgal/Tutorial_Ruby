{"filter":false,"title":"user.rb","tooltip":"/sample_app/app/models/user.rb","undoManager":{"mark":42,"position":42,"stack":[[{"start":{"row":0,"column":0},"end":{"row":3,"column":3},"action":"remove","lines":["class User < ApplicationRecord","  validates :name,  presence: true, length: { maximum: 50 }","  validates :email, presence: true, length: { maximum: 255 }","end"],"id":5},{"start":{"row":0,"column":0},"end":{"row":5,"column":3},"action":"insert","lines":["class User < ApplicationRecord","  validates :name,  presence: true, length: { maximum: 50 }","  VALID_EMAIL_REGEX = /\\A[\\w+\\-.]+@[a-z\\d\\-.]+\\.[a-z]+\\z/i","  validates :email, presence: true, length: { maximum: 255 },","                    format: { with: VALID_EMAIL_REGEX }","end"]}],[{"start":{"row":0,"column":0},"end":{"row":5,"column":3},"action":"remove","lines":["class User < ApplicationRecord","  validates :name,  presence: true, length: { maximum: 50 }","  VALID_EMAIL_REGEX = /\\A[\\w+\\-.]+@[a-z\\d\\-.]+\\.[a-z]+\\z/i","  validates :email, presence: true, length: { maximum: 255 },","                    format: { with: VALID_EMAIL_REGEX }","end"],"id":6},{"start":{"row":0,"column":0},"end":{"row":6,"column":3},"action":"insert","lines":["class User < ApplicationRecord","  validates :name,  presence: true, length: { maximum: 50 }","  VALID_EMAIL_REGEX = /\\A[\\w+\\-.]+@[a-z\\d\\-.]+\\.[a-z]+\\z/i","  validates :email, presence: true, length: { maximum: 255 },","                    format: { with: VALID_EMAIL_REGEX },","                    uniqueness: true","end"]}],[{"start":{"row":0,"column":0},"end":{"row":6,"column":3},"action":"remove","lines":["class User < ApplicationRecord","  validates :name,  presence: true, length: { maximum: 50 }","  VALID_EMAIL_REGEX = /\\A[\\w+\\-.]+@[a-z\\d\\-.]+\\.[a-z]+\\z/i","  validates :email, presence: true, length: { maximum: 255 },","                    format: { with: VALID_EMAIL_REGEX },","                    uniqueness: true","end"],"id":7},{"start":{"row":0,"column":0},"end":{"row":6,"column":3},"action":"insert","lines":["class User < ApplicationRecord","  validates :name,  presence: true, length: { maximum: 50 }","  VALID_EMAIL_REGEX = /\\A[\\w+\\-.]+@[a-z\\d\\-.]+\\.[a-z]+\\z/i","  validates :email, presence: true, length: { maximum: 255 },","                    format: { with: VALID_EMAIL_REGEX },","                    uniqueness: { case_sensitive: false }","end"]}],[{"start":{"row":0,"column":0},"end":{"row":6,"column":3},"action":"remove","lines":["class User < ApplicationRecord","  validates :name,  presence: true, length: { maximum: 50 }","  VALID_EMAIL_REGEX = /\\A[\\w+\\-.]+@[a-z\\d\\-.]+\\.[a-z]+\\z/i","  validates :email, presence: true, length: { maximum: 255 },","                    format: { with: VALID_EMAIL_REGEX },","                    uniqueness: { case_sensitive: false }","end"],"id":8},{"start":{"row":0,"column":0},"end":{"row":7,"column":3},"action":"insert","lines":["class User < ApplicationRecord","  before_save { self.email = email.downcase }","  validates :name,  presence: true, length: { maximum: 50 }","  VALID_EMAIL_REGEX = /\\A[\\w+\\-.]+@[a-z\\d\\-.]+\\.[a-z]+\\z/i","  validates :email, presence: true, length: { maximum: 255 },","                    format: { with: VALID_EMAIL_REGEX },","                    uniqueness: { case_sensitive: false }","end"]}],[{"start":{"row":0,"column":0},"end":{"row":7,"column":3},"action":"remove","lines":["class User < ApplicationRecord","  before_save { self.email = email.downcase }","  validates :name,  presence: true, length: { maximum: 50 }","  VALID_EMAIL_REGEX = /\\A[\\w+\\-.]+@[a-z\\d\\-.]+\\.[a-z]+\\z/i","  validates :email, presence: true, length: { maximum: 255 },","                    format: { with: VALID_EMAIL_REGEX },","                    uniqueness: { case_sensitive: false }","end"],"id":9},{"start":{"row":0,"column":0},"end":{"row":8,"column":3},"action":"insert","lines":["class User < ApplicationRecord","  before_save { self.email = email.downcase }","  validates :name, presence: true, length: { maximum: 50 }","  VALID_EMAIL_REGEX = /\\A[\\w+\\-.]+@[a-z\\d\\-.]+\\.[a-z]+\\z/i","  validates :email, presence: true, length: { maximum: 255 },","                    format: { with: VALID_EMAIL_REGEX },","                    uniqueness: { case_sensitive: false }","  has_secure_password","end"]}],[{"start":{"row":0,"column":0},"end":{"row":8,"column":3},"action":"remove","lines":["class User < ApplicationRecord","  before_save { self.email = email.downcase }","  validates :name, presence: true, length: { maximum: 50 }","  VALID_EMAIL_REGEX = /\\A[\\w+\\-.]+@[a-z\\d\\-.]+\\.[a-z]+\\z/i","  validates :email, presence: true, length: { maximum: 255 },","                    format: { with: VALID_EMAIL_REGEX },","                    uniqueness: { case_sensitive: false }","  has_secure_password","end"],"id":10},{"start":{"row":0,"column":0},"end":{"row":9,"column":3},"action":"insert","lines":["class User < ApplicationRecord","  before_save { self.email = email.downcase }","  validates :name, presence: true, length: { maximum: 50 }","  VALID_EMAIL_REGEX = /\\A[\\w+\\-.]+@[a-z\\d\\-.]+\\.[a-z]+\\z/i","  validates :email, presence: true, length: { maximum: 255 },","                    format: { with: VALID_EMAIL_REGEX },","                    uniqueness: { case_sensitive: false }","  has_secure_password","  validates :password, presence: true, length: { minimum: 6 }","end"]}],[{"start":{"row":0,"column":0},"end":{"row":9,"column":3},"action":"remove","lines":["class User < ApplicationRecord","  before_save { self.email = email.downcase }","  validates :name, presence: true, length: { maximum: 50 }","  VALID_EMAIL_REGEX = /\\A[\\w+\\-.]+@[a-z\\d\\-.]+\\.[a-z]+\\z/i","  validates :email, presence: true, length: { maximum: 255 },","                    format: { with: VALID_EMAIL_REGEX },","                    uniqueness: { case_sensitive: false }","  has_secure_password","  validates :password, presence: true, length: { minimum: 6 }","end"],"id":11},{"start":{"row":0,"column":0},"end":{"row":16,"column":3},"action":"insert","lines":["class User < ApplicationRecord","  before_save { self.email = email.downcase }","  validates :name,  presence: true, length: { maximum: 50 }","  VALID_EMAIL_REGEX = /\\A[\\w+\\-.]+@[a-z\\d\\-.]+\\.[a-z]+\\z/i","  validates :email, presence: true, length: { maximum: 255 },","                    format: { with: VALID_EMAIL_REGEX },","                    uniqueness: { case_sensitive: false }","  has_secure_password","  validates :password, presence: true, length: { minimum: 6 }","","  # Returns the hash digest of the given string.","  def User.digest(string)","    cost = ActiveModel::SecurePassword.min_cost ? BCrypt::Engine::MIN_COST :","                                                  BCrypt::Engine.cost","    BCrypt::Password.create(string, cost: cost)","  end","end"]}],[{"start":{"row":0,"column":0},"end":{"row":16,"column":3},"action":"remove","lines":["class User < ApplicationRecord","  before_save { self.email = email.downcase }","  validates :name,  presence: true, length: { maximum: 50 }","  VALID_EMAIL_REGEX = /\\A[\\w+\\-.]+@[a-z\\d\\-.]+\\.[a-z]+\\z/i","  validates :email, presence: true, length: { maximum: 255 },","                    format: { with: VALID_EMAIL_REGEX },","                    uniqueness: { case_sensitive: false }","  has_secure_password","  validates :password, presence: true, length: { minimum: 6 }","","  # Returns the hash digest of the given string.","  def User.digest(string)","    cost = ActiveModel::SecurePassword.min_cost ? BCrypt::Engine::MIN_COST :","                                                  BCrypt::Engine.cost","    BCrypt::Password.create(string, cost: cost)","  end","end"],"id":12},{"start":{"row":0,"column":0},"end":{"row":21,"column":3},"action":"insert","lines":["class User < ApplicationRecord","  before_save { self.email = email.downcase }","  validates :name,  presence: true, length: { maximum: 50 }","  VALID_EMAIL_REGEX = /\\A[\\w+\\-.]+@[a-z\\d\\-.]+\\.[a-z]+\\z/i","  validates :email, presence: true, length: { maximum: 255 },","                    format: { with: VALID_EMAIL_REGEX },","                    uniqueness: { case_sensitive: false }","  has_secure_password","  validates :password, presence: true, length: { minimum: 6 }","","  # Returns the hash digest of the given string.","  def User.digest(string)","    cost = ActiveModel::SecurePassword.min_cost ? BCrypt::Engine::MIN_COST :","                                                  BCrypt::Engine.cost","    BCrypt::Password.create(string, cost: cost)","  end","","  # Returns a random token.","  def User.new_token","    SecureRandom.urlsafe_base64","  end","end"]}],[{"start":{"row":0,"column":0},"end":{"row":21,"column":3},"action":"remove","lines":["class User < ApplicationRecord","  before_save { self.email = email.downcase }","  validates :name,  presence: true, length: { maximum: 50 }","  VALID_EMAIL_REGEX = /\\A[\\w+\\-.]+@[a-z\\d\\-.]+\\.[a-z]+\\z/i","  validates :email, presence: true, length: { maximum: 255 },","                    format: { with: VALID_EMAIL_REGEX },","                    uniqueness: { case_sensitive: false }","  has_secure_password","  validates :password, presence: true, length: { minimum: 6 }","","  # Returns the hash digest of the given string.","  def User.digest(string)","    cost = ActiveModel::SecurePassword.min_cost ? BCrypt::Engine::MIN_COST :","                                                  BCrypt::Engine.cost","    BCrypt::Password.create(string, cost: cost)","  end","","  # Returns a random token.","  def User.new_token","    SecureRandom.urlsafe_base64","  end","end"],"id":13},{"start":{"row":0,"column":0},"end":{"row":28,"column":3},"action":"insert","lines":["class User < ApplicationRecord","  attr_accessor :remember_token","  before_save { self.email = email.downcase }","  validates :name,  presence: true, length: { maximum: 50 }","  VALID_EMAIL_REGEX = /\\A[\\w+\\-.]+@[a-z\\d\\-.]+\\.[a-z]+\\z/i","  validates :email, presence: true, length: { maximum: 255 },","                    format: { with: VALID_EMAIL_REGEX },","                    uniqueness: { case_sensitive: false }","  has_secure_password","  validates :password, presence: true, length: { minimum: 6 }","","  # Returns the hash digest of the given string.","  def User.digest(string)","    cost = ActiveModel::SecurePassword.min_cost ? BCrypt::Engine::MIN_COST :","                                                  BCrypt::Engine.cost","    BCrypt::Password.create(string, cost: cost)","  end","","  # Returns a random token.","  def User.new_token","    SecureRandom.urlsafe_base64","  end","","  # Remembers a user in the database for use in persistent sessions.","  def remember","    self.remember_token = User.new_token","    update_attribute(:remember_digest, User.digest(remember_token))","  end","end"]}],[{"start":{"row":21,"column":5},"end":{"row":22,"column":0},"action":"insert","lines":["",""],"id":14},{"start":{"row":22,"column":0},"end":{"row":22,"column":2},"action":"insert","lines":["  "]},{"start":{"row":22,"column":2},"end":{"row":23,"column":0},"action":"insert","lines":["",""]},{"start":{"row":23,"column":0},"end":{"row":23,"column":2},"action":"insert","lines":["  "]}],[{"start":{"row":23,"column":2},"end":{"row":33,"column":5},"action":"insert","lines":["# Returns the hash digest of the given string.","  def self.digest(string)","    cost = ActiveModel::SecurePassword.min_cost ? BCrypt::Engine::MIN_COST :","                                                  BCrypt::Engine.cost","    BCrypt::Password.create(string, cost: cost)","  end","","  # Returns a random token.","  def self.new_token","    SecureRandom.urlsafe_base64","  end"],"id":15}],[{"start":{"row":11,"column":2},"end":{"row":21,"column":5},"action":"remove","lines":["# Returns the hash digest of the given string.","  def User.digest(string)","    cost = ActiveModel::SecurePassword.min_cost ? BCrypt::Engine::MIN_COST :","                                                  BCrypt::Engine.cost","    BCrypt::Password.create(string, cost: cost)","  end","","  # Returns a random token.","  def User.new_token","    SecureRandom.urlsafe_base64","  end"],"id":16},{"start":{"row":11,"column":2},"end":{"row":22,"column":7},"action":"insert","lines":["class << self","    # Returns the hash digest of the given string.","    def digest(string)","      cost = ActiveModel::SecurePassword.min_cost ? BCrypt::Engine::MIN_COST :","                                                    BCrypt::Engine.cost","      BCrypt::Password.create(string, cost: cost)","    end","","    # Returns a random token.","    def new_token","      SecureRandom.urlsafe_base64","    end"]}],[{"start":{"row":0,"column":0},"end":{"row":41,"column":3},"action":"remove","lines":["class User < ApplicationRecord","  attr_accessor :remember_token","  before_save { self.email = email.downcase }","  validates :name,  presence: true, length: { maximum: 50 }","  VALID_EMAIL_REGEX = /\\A[\\w+\\-.]+@[a-z\\d\\-.]+\\.[a-z]+\\z/i","  validates :email, presence: true, length: { maximum: 255 },","                    format: { with: VALID_EMAIL_REGEX },","                    uniqueness: { case_sensitive: false }","  has_secure_password","  validates :password, presence: true, length: { minimum: 6 }","","  class << self","    # Returns the hash digest of the given string.","    def digest(string)","      cost = ActiveModel::SecurePassword.min_cost ? BCrypt::Engine::MIN_COST :","                                                    BCrypt::Engine.cost","      BCrypt::Password.create(string, cost: cost)","    end","","    # Returns a random token.","    def new_token","      SecureRandom.urlsafe_base64","    end","  ","  # Returns the hash digest of the given string.","  def self.digest(string)","    cost = ActiveModel::SecurePassword.min_cost ? BCrypt::Engine::MIN_COST :","                                                  BCrypt::Engine.cost","    BCrypt::Password.create(string, cost: cost)","  end","","  # Returns a random token.","  def self.new_token","    SecureRandom.urlsafe_base64","  end","","  # Remembers a user in the database for use in persistent sessions.","  def remember","    self.remember_token = User.new_token","    update_attribute(:remember_digest, User.digest(remember_token))","  end","end"],"id":17},{"start":{"row":0,"column":0},"end":{"row":33,"column":3},"action":"insert","lines":["class User < ApplicationRecord","  attr_accessor :remember_token","  before_save { self.email = email.downcase }","  validates :name,  presence: true, length: { maximum: 50 }","  VALID_EMAIL_REGEX = /\\A[\\w+\\-.]+@[a-z\\d\\-.]+\\.[a-z]+\\z/i","  validates :email, presence: true, length: { maximum: 255 },","                    format: { with: VALID_EMAIL_REGEX },","                    uniqueness: { case_sensitive: false }","  has_secure_password","  validates :password, presence: true, length: { minimum: 6 }","","  # Returns the hash digest of the given string.","  def User.digest(string)","    cost = ActiveModel::SecurePassword.min_cost ? BCrypt::Engine::MIN_COST :","                                                  BCrypt::Engine.cost","    BCrypt::Password.create(string, cost: cost)","  end","","  # Returns a random token.","  def User.new_token","    SecureRandom.urlsafe_base64","  end","","  # Remembers a user in the database for use in persistent sessions.","  def remember","    self.remember_token = User.new_token","    update_attribute(:remember_digest, User.digest(remember_token))","  end","","  # Returns true if the given token matches the digest.","  def authenticated?(remember_token)","    BCrypt::Password.new(remember_digest).is_password?(remember_token)","  end","end"]}],[{"start":{"row":0,"column":0},"end":{"row":33,"column":3},"action":"remove","lines":["class User < ApplicationRecord","  attr_accessor :remember_token","  before_save { self.email = email.downcase }","  validates :name,  presence: true, length: { maximum: 50 }","  VALID_EMAIL_REGEX = /\\A[\\w+\\-.]+@[a-z\\d\\-.]+\\.[a-z]+\\z/i","  validates :email, presence: true, length: { maximum: 255 },","                    format: { with: VALID_EMAIL_REGEX },","                    uniqueness: { case_sensitive: false }","  has_secure_password","  validates :password, presence: true, length: { minimum: 6 }","","  # Returns the hash digest of the given string.","  def User.digest(string)","    cost = ActiveModel::SecurePassword.min_cost ? BCrypt::Engine::MIN_COST :","                                                  BCrypt::Engine.cost","    BCrypt::Password.create(string, cost: cost)","  end","","  # Returns a random token.","  def User.new_token","    SecureRandom.urlsafe_base64","  end","","  # Remembers a user in the database for use in persistent sessions.","  def remember","    self.remember_token = User.new_token","    update_attribute(:remember_digest, User.digest(remember_token))","  end","","  # Returns true if the given token matches the digest.","  def authenticated?(remember_token)","    BCrypt::Password.new(remember_digest).is_password?(remember_token)","  end","end"],"id":18},{"start":{"row":0,"column":0},"end":{"row":39,"column":0},"action":"insert","lines":["class User < ApplicationRecord","  attr_accessor :remember_token","  before_save { self.email = email.downcase }","  validates :name,  presence: true, length: { maximum: 50 }","  VALID_EMAIL_REGEX = /\\A[\\w+\\-.]+@[a-z\\d\\-.]+\\.[a-z]+\\z/i","  validates :email, presence: true, length: { maximum: 255 },","                    format: { with: VALID_EMAIL_REGEX },","                    uniqueness: { case_sensitive: false }","  has_secure_password","  validates :password, presence: true, length: { minimum: 6 }","","  # Returns the hash digest of the given string.","  def User.digest(string)","    cost = ActiveModel::SecurePassword.min_cost ? BCrypt::Engine::MIN_COST :","                                                  BCrypt::Engine.cost","    BCrypt::Password.create(string, cost: cost)","  end","","  # Returns a random token.","  def User.new_token","    SecureRandom.urlsafe_base64","  end","","  # Remembers a user in the database for use in persistent sessions.","  def remember","    self.remember_token = User.new_token","    update_attribute(:remember_digest, User.digest(remember_token))","  end","","  # Returns true if the given token matches the digest.","  def authenticated?(remember_token)","    BCrypt::Password.new(remember_digest).is_password?(remember_token)","  end","","  # Forgets a user.","  def forget","    update_attribute(:remember_digest, nil)","  end","end",""]}],[{"start":{"row":30,"column":2},"end":{"row":38,"column":3},"action":"remove","lines":["def authenticated?(remember_token)","    BCrypt::Password.new(remember_digest).is_password?(remember_token)","  end","","  # Forgets a user.","  def forget","    update_attribute(:remember_digest, nil)","  end","end"],"id":19},{"start":{"row":30,"column":2},"end":{"row":39,"column":3},"action":"insert","lines":["def authenticated?(remember_token)","    return false if remember_digest.nil?","    BCrypt::Password.new(remember_digest).is_password?(remember_token)","  end","","  # Forgets a user.","  def forget","    update_attribute(:remember_digest, nil)","  end","end"]}],[{"start":{"row":9,"column":2},"end":{"row":9,"column":61},"action":"remove","lines":["validates :password, presence: true, length: { minimum: 6 }"],"id":20},{"start":{"row":9,"column":2},"end":{"row":9,"column":78},"action":"insert","lines":["validates :password, presence: true, length: { minimum: 6 }, allow_nil: true"]}],[{"start":{"row":0,"column":0},"end":{"row":2,"column":45},"action":"remove","lines":["class User < ApplicationRecord","  attr_accessor :remember_token","  before_save { self.email = email.downcase }"],"id":21},{"start":{"row":0,"column":0},"end":{"row":3,"column":41},"action":"insert","lines":["class User < ApplicationRecord","  attr_accessor :remember_token, :activation_token","  before_save   :downcase_email","  before_create :create_activation_digest"]}],[{"start":{"row":40,"column":0},"end":{"row":40,"column":3},"action":"remove","lines":["end"],"id":22},{"start":{"row":40,"column":0},"end":{"row":41,"column":0},"action":"insert","lines":["",""]}],[{"start":{"row":41,"column":0},"end":{"row":41,"column":2},"action":"insert","lines":["  "],"id":23}],[{"start":{"row":41,"column":2},"end":{"row":52,"column":0},"action":"insert","lines":["# Converts email to all lower-case.","    def downcase_email","      self.email = email.downcase","    end","","    # Creates and assigns the activation token and digest.","    def create_activation_digest","      self.activation_token  = User.new_token","      self.activation_digest = User.digest(activation_token)","    end","end",""],"id":24}],[{"start":{"row":30,"column":2},"end":{"row":34,"column":5},"action":"remove","lines":["# Returns true if the given token matches the digest.","  def authenticated?(remember_token)","    return false if remember_digest.nil?","    BCrypt::Password.new(remember_digest).is_password?(remember_token)","  end"],"id":25},{"start":{"row":30,"column":2},"end":{"row":35,"column":5},"action":"insert","lines":["# Returns true if the given token matches the digest.","  def authenticated?(attribute, token)","    digest = send(\"#{attribute}_digest\")","    return false if digest.nil?","    BCrypt::Password.new(digest).is_password?(token)","  end"]}],[{"start":{"row":35,"column":5},"end":{"row":36,"column":0},"action":"insert","lines":["",""],"id":26},{"start":{"row":36,"column":0},"end":{"row":36,"column":2},"action":"insert","lines":["  "]},{"start":{"row":36,"column":2},"end":{"row":37,"column":0},"action":"insert","lines":["",""]},{"start":{"row":37,"column":0},"end":{"row":37,"column":2},"action":"insert","lines":["  "]}],[{"start":{"row":37,"column":2},"end":{"row":46,"column":5},"action":"insert","lines":["# Activates an account.","  def activate","    update_attribute(:activated,    true)","    update_attribute(:activated_at, Time.zone.now)","  end","","  # Sends activation email.","  def send_activation_email","    UserMailer.account_activation(self).deliver_now","  end"],"id":27}],[{"start":{"row":1,"column":2},"end":{"row":1,"column":50},"action":"remove","lines":["attr_accessor :remember_token, :activation_token"],"id":28},{"start":{"row":1,"column":2},"end":{"row":1,"column":64},"action":"insert","lines":["attr_accessor :remember_token, :activation_token, :reset_token"]}],[{"start":{"row":37,"column":2},"end":{"row":64,"column":0},"action":"remove","lines":["# Activates an account.","  def activate","    update_attribute(:activated,    true)","    update_attribute(:activated_at, Time.zone.now)","  end","","  # Sends activation email.","  def send_activation_email","    UserMailer.account_activation(self).deliver_now","  end","","  # Forgets a user.","  def forget","    update_attribute(:remember_digest, nil)","  end","","  # Converts email to all lower-case.","    def downcase_email","      self.email = email.downcase","    end","","    # Creates and assigns the activation token and digest.","    def create_activation_digest","      self.activation_token  = User.new_token","      self.activation_digest = User.digest(activation_token)","    end","end",""],"id":29},{"start":{"row":37,"column":2},"end":{"row":72,"column":3},"action":"insert","lines":["# Activates an account.","  def activate","    update_attribute(:activated,    true)","    update_attribute(:activated_at, Time.zone.now)","  end","","  # Sends activation email.","  def send_activation_email","    UserMailer.account_activation(self).deliver_now","  end","","  # Sets the password reset attributes.","  def create_reset_digest","    self.reset_token = User.new_token","    update_attribute(:reset_digest,  User.digest(reset_token))","    update_attribute(:reset_sent_at, Time.zone.now)","  end","","  # Sends password reset email.","  def send_password_reset_email","    UserMailer.password_reset(self).deliver_now","  end","","  private","","    # Converts email to all lower-case.","    def downcase_email","      self.email = email.downcase","    end","","    # Creates and assigns the activation token and digest.","    def create_activation_digest","      self.activation_token  = User.new_token","      self.activation_digest = User.digest(activation_token)","    end","end"]}],[{"start":{"row":48,"column":1},"end":{"row":73,"column":0},"action":"remove","lines":[" # Sets the password reset attributes.","  def create_reset_digest","    self.reset_token = User.new_token","    update_attribute(:reset_digest,  User.digest(reset_token))","    update_attribute(:reset_sent_at, Time.zone.now)","  end","","  # Sends password reset email.","  def send_password_reset_email","    UserMailer.password_reset(self).deliver_now","  end","","  private","","    # Converts email to all lower-case.","    def downcase_email","      self.email = email.downcase","    end","","    # Creates and assigns the activation token and digest.","    def create_activation_digest","      self.activation_token  = User.new_token","      self.activation_digest = User.digest(activation_token)","    end","end",""],"id":30},{"start":{"row":48,"column":1},"end":{"row":72,"column":3},"action":"insert","lines":["# Sets the password reset attributes.","  def create_reset_digest","    self.reset_token = User.new_token","    update_attribute(:reset_digest,  User.digest(reset_token))","    update_attribute(:reset_sent_at, Time.zone.now)","  end","","  # Sends password reset email.","  def send_password_reset_email","    UserMailer.password_reset(self).deliver_now","  end","","  private","","    # Converts email to all lower-case.","    def downcase_email","      self.email = email.downcase","    end","","    # Creates and assigns the activation token and digest.","    def create_activation_digest","      self.activation_token  = User.new_token","      self.activation_digest = User.digest(activation_token)","    end","end"]}],[{"start":{"row":37,"column":2},"end":{"row":46,"column":5},"action":"remove","lines":["# Activates an account.","  def activate","    update_attribute(:activated,    true)","    update_attribute(:activated_at, Time.zone.now)","  end","","  # Sends activation email.","  def send_activation_email","    UserMailer.account_activation(self).deliver_now","  end"],"id":31},{"start":{"row":37,"column":2},"end":{"row":46,"column":5},"action":"insert","lines":["# Activates an account.","  def activate","    update_attribute(:activated,    true)","    update_attribute(:activated_at, Time.zone.now)","  end","","  # Sends activation email.","  def send_activation_email","    UserMailer.account_activation(self).deliver_now","  end"]}],[{"start":{"row":1,"column":50},"end":{"row":1,"column":64},"action":"remove","lines":[", :reset_token"],"id":32,"ignore":true},{"start":{"row":48,"column":0},"end":{"row":48,"column":1},"action":"insert","lines":[" "]},{"start":{"row":48,"column":4},"end":{"row":62,"column":2},"action":"remove","lines":["Sets the password reset attributes.","  def create_reset_digest","    self.reset_token = User.new_token","    update_attribute(:reset_digest,  User.digest(reset_token))","    update_attribute(:reset_sent_at, Time.zone.now)","  end","","  # Sends password reset email.","  def send_password_reset_email","    UserMailer.password_reset(self).deliver_now","  end","","  private","","  "]},{"start":{"row":48,"column":4},"end":{"row":53,"column":0},"action":"insert","lines":["Forgets a user.","  def forget","    update_attribute(:remember_digest, nil)","  end","",""]},{"start":{"row":63,"column":3},"end":{"row":65,"column":0},"action":"insert","lines":["","",""]}],[{"start":{"row":0,"column":0},"end":{"row":3,"column":41},"action":"remove","lines":["class User < ApplicationRecord","  attr_accessor :remember_token, :activation_token","  before_save   :downcase_email","  before_create :create_activation_digest"],"id":33},{"start":{"row":0,"column":0},"end":{"row":3,"column":41},"action":"insert","lines":["class User < ApplicationRecord","  attr_accessor :remember_token, :activation_token, :reset_token","  before_save   :downcase_email","  before_create :create_activation_digest"]}],[{"start":{"row":37,"column":1},"end":{"row":46,"column":5},"action":"remove","lines":[" # Activates an account.","  def activate","    update_attribute(:activated,    true)","    update_attribute(:activated_at, Time.zone.now)","  end","","  # Sends activation email.","  def send_activation_email","    UserMailer.account_activation(self).deliver_now","  end"],"id":34},{"start":{"row":37,"column":1},"end":{"row":47,"column":0},"action":"insert","lines":["# Activates an account.","  def activate","    update_attribute(:activated,    true)","    update_attribute(:activated_at, Time.zone.now)","  end","","  # Sends activation email.","  def send_activation_email","    UserMailer.account_activation(self).deliver_now","  end",""]}],[{"start":{"row":46,"column":4},"end":{"row":46,"column":5},"action":"remove","lines":["d"],"id":35}],[{"start":{"row":46,"column":4},"end":{"row":46,"column":5},"action":"insert","lines":["d"],"id":36}],[{"start":{"row":47,"column":0},"end":{"row":48,"column":0},"action":"insert","lines":["",""],"id":39}],[{"start":{"row":48,"column":0},"end":{"row":48,"column":2},"action":"insert","lines":["  "],"id":40}],[{"start":{"row":48,"column":2},"end":{"row":58,"column":5},"action":"insert","lines":["# Sets the password reset attributes.","  def create_reset_digest","    self.reset_token = User.new_token","    update_attribute(:reset_digest,  User.digest(reset_token))","    update_attribute(:reset_sent_at, Time.zone.now)","  end","","  # Sends password reset email.","  def send_password_reset_email","    UserMailer.password_reset(self).deliver_now","  end"],"id":41}],[{"start":{"row":63,"column":5},"end":{"row":64,"column":0},"action":"insert","lines":["",""],"id":42},{"start":{"row":64,"column":0},"end":{"row":64,"column":2},"action":"insert","lines":["  "]},{"start":{"row":64,"column":2},"end":{"row":65,"column":0},"action":"insert","lines":["",""]},{"start":{"row":65,"column":0},"end":{"row":65,"column":2},"action":"insert","lines":["  "]},{"start":{"row":65,"column":2},"end":{"row":65,"column":3},"action":"insert","lines":["p"]},{"start":{"row":65,"column":3},"end":{"row":65,"column":4},"action":"insert","lines":["r"]},{"start":{"row":65,"column":4},"end":{"row":65,"column":5},"action":"insert","lines":["i"]},{"start":{"row":65,"column":5},"end":{"row":65,"column":6},"action":"insert","lines":["v"]},{"start":{"row":65,"column":6},"end":{"row":65,"column":7},"action":"insert","lines":["a"]}],[{"start":{"row":65,"column":7},"end":{"row":65,"column":8},"action":"insert","lines":["t"],"id":43},{"start":{"row":65,"column":8},"end":{"row":65,"column":9},"action":"insert","lines":["e"]}],[{"start":{"row":67,"column":2},"end":{"row":77,"column":3},"action":"remove","lines":["# Converts email to all lower-case.","    def downcase_email","      self.email = email.downcase","    end","","    # Creates and assigns the activation token and digest.","    def create_activation_digest","      self.activation_token  = User.new_token","      self.activation_digest = User.digest(activation_token)","    end","end"],"id":44},{"start":{"row":67,"column":2},"end":{"row":77,"column":3},"action":"insert","lines":["# Converts email to all lower-case.","    def downcase_email","      self.email = email.downcase","    end","","    # Creates and assigns the activation token and digest.","    def create_activation_digest","      self.activation_token  = User.new_token","      self.activation_digest = User.digest(activation_token)","    end","end"]}],[{"start":{"row":63,"column":5},"end":{"row":64,"column":0},"action":"insert","lines":["",""],"id":45},{"start":{"row":64,"column":0},"end":{"row":64,"column":2},"action":"insert","lines":["  "]},{"start":{"row":64,"column":2},"end":{"row":65,"column":0},"action":"insert","lines":["",""]},{"start":{"row":65,"column":0},"end":{"row":65,"column":2},"action":"insert","lines":["  "]}],[{"start":{"row":65,"column":2},"end":{"row":68,"column":5},"action":"insert","lines":["# Returns true if a password reset has expired.","  def password_reset_expired?","    reset_sent_at < 2.hours.ago","  end"],"id":46}],[{"start":{"row":65,"column":2},"end":{"row":68,"column":5},"action":"remove","lines":["# Returns true if a password reset has expired.","  def password_reset_expired?","    reset_sent_at < 2.hours.ago","  end"],"id":47},{"start":{"row":65,"column":2},"end":{"row":68,"column":5},"action":"insert","lines":["# Returns true if a password reset has expired.","  def password_reset_expired?","    reset_sent_at < 2.hours.ago","  end"]}],[{"start":{"row":12,"column":2},"end":{"row":68,"column":5},"action":"remove","lines":["# Returns the hash digest of the given string.","  def User.digest(string)","    cost = ActiveModel::SecurePassword.min_cost ? BCrypt::Engine::MIN_COST :","                                                  BCrypt::Engine.cost","    BCrypt::Password.create(string, cost: cost)","  end","","  # Returns a random token.","  def User.new_token","    SecureRandom.urlsafe_base64","  end","","  # Remembers a user in the database for use in persistent sessions.","  def remember","    self.remember_token = User.new_token","    update_attribute(:remember_digest, User.digest(remember_token))","  end","","  # Returns true if the given token matches the digest.","  def authenticated?(attribute, token)","    digest = send(\"#{attribute}_digest\")","    return false if digest.nil?","    BCrypt::Password.new(digest).is_password?(token)","  end","  "," # Activates an account.","  def activate","    update_attribute(:activated,    true)","    update_attribute(:activated_at, Time.zone.now)","  end","","  # Sends activation email.","  def send_activation_email","    UserMailer.account_activation(self).deliver_now","  end","","  # Sets the password reset attributes.","  def create_reset_digest","    self.reset_token = User.new_token","    update_attribute(:reset_digest,  User.digest(reset_token))","    update_attribute(:reset_sent_at, Time.zone.now)","  end","","  # Sends password reset email.","  def send_password_reset_email","    UserMailer.password_reset(self).deliver_now","  end","","  # Forgets a user.","  def forget","    update_attribute(:remember_digest, nil)","  end","  ","  # Returns true if a password reset has expired.","  def password_reset_expired?","    reset_sent_at < 2.hours.ago","  end"],"id":49},{"start":{"row":12,"column":2},"end":{"row":72,"column":5},"action":"insert","lines":["# Returns the hash digest of the given string.","  def self.digest(string)","    cost = ActiveModel::SecurePassword.min_cost ? BCrypt::Engine::MIN_COST :","                                                  BCrypt::Engine.cost","    BCrypt::Password.create(string, cost: cost)","  end","","  # Returns a random token.","  def self.new_token","    SecureRandom.urlsafe_base64","  end","","  # Remembers a user in the database for use in persistent sessions.","  def remember","    self.remember_token = User.new_token","    update_attribute(:remember_digest, User.digest(remember_token))","  end","","  # Returns true if the given token matches the digest.","  def authenticated?(remember_token)","    return false if remember_digest.nil?","    BCrypt::Password.new(remember_digest).is_password?(remember_token)","  end","","  # Forgets a user.","  def forget","    update_attribute(:remember_digest, nil)","  end","","  # Returns true if the given token matches the digest.","  def authenticated?(attribute, token)","    digest = send(\"#{attribute}_digest\")","    return false if digest.nil?","    BCrypt::Password.new(digest).is_password?(token)","  end","","  # Activates an account.","  def activate","    update_columns(activated: true, activated_at: Time.zone.now)","  end","","  # Sends activation email.","  def send_activation_email","    UserMailer.account_activation(self).deliver_now","  end","","  # Sets the password reset attributes.","  def create_reset_digest","    self.reset_token = User.new_token","    update_columns(reset_digest:  User.digest(reset_token), reset_sent_at: Time.zone.now)","  end","","  # Sends password reset email.","  def send_password_reset_email","    UserMailer.password_reset(self).deliver_now","  end","","  # Returns true if a password reset has expired.","  def password_reset_expired?","    reset_sent_at < 2.hours.ago","  end"]}],[{"start":{"row":58,"column":2},"end":{"row":62,"column":5},"action":"remove","lines":["# Sets the password reset attributes.","  def create_reset_digest","    self.reset_token = User.new_token","    update_columns(reset_digest:  User.digest(reset_token), reset_sent_at: Time.zone.now)","  end"],"id":50},{"start":{"row":58,"column":2},"end":{"row":62,"column":5},"action":"insert","lines":["# Sets the password reset attributes.","  def create_reset_digest","    self.reset_token = User.new_token","    update_columns(reset_digest:  FILL_IN, reset_sent_at: FILL_IN)","  end"]}]]},"ace":{"folds":[],"scrolltop":777,"scrollleft":0,"selection":{"start":{"row":62,"column":5},"end":{"row":62,"column":5},"isBackwards":false},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":{"row":43,"state":"start","mode":"ace/mode/ruby"}},"timestamp":1540790940787,"hash":"d7422b1b6bd38a5fa0f7e5ae85898f7b9560b272"}