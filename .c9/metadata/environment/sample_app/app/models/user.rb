{"filter":false,"title":"user.rb","tooltip":"/sample_app/app/models/user.rb","undoManager":{"mark":15,"position":15,"stack":[[{"start":{"row":0,"column":0},"end":{"row":3,"column":3},"action":"remove","lines":["class User < ApplicationRecord","  validates :name,  presence: true, length: { maximum: 50 }","  validates :email, presence: true, length: { maximum: 255 }","end"],"id":5},{"start":{"row":0,"column":0},"end":{"row":5,"column":3},"action":"insert","lines":["class User < ApplicationRecord","  validates :name,  presence: true, length: { maximum: 50 }","  VALID_EMAIL_REGEX = /\\A[\\w+\\-.]+@[a-z\\d\\-.]+\\.[a-z]+\\z/i","  validates :email, presence: true, length: { maximum: 255 },","                    format: { with: VALID_EMAIL_REGEX }","end"]}],[{"start":{"row":0,"column":0},"end":{"row":5,"column":3},"action":"remove","lines":["class User < ApplicationRecord","  validates :name,  presence: true, length: { maximum: 50 }","  VALID_EMAIL_REGEX = /\\A[\\w+\\-.]+@[a-z\\d\\-.]+\\.[a-z]+\\z/i","  validates :email, presence: true, length: { maximum: 255 },","                    format: { with: VALID_EMAIL_REGEX }","end"],"id":6},{"start":{"row":0,"column":0},"end":{"row":6,"column":3},"action":"insert","lines":["class User < ApplicationRecord","  validates :name,  presence: true, length: { maximum: 50 }","  VALID_EMAIL_REGEX = /\\A[\\w+\\-.]+@[a-z\\d\\-.]+\\.[a-z]+\\z/i","  validates :email, presence: true, length: { maximum: 255 },","                    format: { with: VALID_EMAIL_REGEX },","                    uniqueness: true","end"]}],[{"start":{"row":0,"column":0},"end":{"row":6,"column":3},"action":"remove","lines":["class User < ApplicationRecord","  validates :name,  presence: true, length: { maximum: 50 }","  VALID_EMAIL_REGEX = /\\A[\\w+\\-.]+@[a-z\\d\\-.]+\\.[a-z]+\\z/i","  validates :email, presence: true, length: { maximum: 255 },","                    format: { with: VALID_EMAIL_REGEX },","                    uniqueness: true","end"],"id":7},{"start":{"row":0,"column":0},"end":{"row":6,"column":3},"action":"insert","lines":["class User < ApplicationRecord","  validates :name,  presence: true, length: { maximum: 50 }","  VALID_EMAIL_REGEX = /\\A[\\w+\\-.]+@[a-z\\d\\-.]+\\.[a-z]+\\z/i","  validates :email, presence: true, length: { maximum: 255 },","                    format: { with: VALID_EMAIL_REGEX },","                    uniqueness: { case_sensitive: false }","end"]}],[{"start":{"row":0,"column":0},"end":{"row":6,"column":3},"action":"remove","lines":["class User < ApplicationRecord","  validates :name,  presence: true, length: { maximum: 50 }","  VALID_EMAIL_REGEX = /\\A[\\w+\\-.]+@[a-z\\d\\-.]+\\.[a-z]+\\z/i","  validates :email, presence: true, length: { maximum: 255 },","                    format: { with: VALID_EMAIL_REGEX },","                    uniqueness: { case_sensitive: false }","end"],"id":8},{"start":{"row":0,"column":0},"end":{"row":7,"column":3},"action":"insert","lines":["class User < ApplicationRecord","  before_save { self.email = email.downcase }","  validates :name,  presence: true, length: { maximum: 50 }","  VALID_EMAIL_REGEX = /\\A[\\w+\\-.]+@[a-z\\d\\-.]+\\.[a-z]+\\z/i","  validates :email, presence: true, length: { maximum: 255 },","                    format: { with: VALID_EMAIL_REGEX },","                    uniqueness: { case_sensitive: false }","end"]}],[{"start":{"row":0,"column":0},"end":{"row":7,"column":3},"action":"remove","lines":["class User < ApplicationRecord","  before_save { self.email = email.downcase }","  validates :name,  presence: true, length: { maximum: 50 }","  VALID_EMAIL_REGEX = /\\A[\\w+\\-.]+@[a-z\\d\\-.]+\\.[a-z]+\\z/i","  validates :email, presence: true, length: { maximum: 255 },","                    format: { with: VALID_EMAIL_REGEX },","                    uniqueness: { case_sensitive: false }","end"],"id":9},{"start":{"row":0,"column":0},"end":{"row":8,"column":3},"action":"insert","lines":["class User < ApplicationRecord","  before_save { self.email = email.downcase }","  validates :name, presence: true, length: { maximum: 50 }","  VALID_EMAIL_REGEX = /\\A[\\w+\\-.]+@[a-z\\d\\-.]+\\.[a-z]+\\z/i","  validates :email, presence: true, length: { maximum: 255 },","                    format: { with: VALID_EMAIL_REGEX },","                    uniqueness: { case_sensitive: false }","  has_secure_password","end"]}],[{"start":{"row":0,"column":0},"end":{"row":8,"column":3},"action":"remove","lines":["class User < ApplicationRecord","  before_save { self.email = email.downcase }","  validates :name, presence: true, length: { maximum: 50 }","  VALID_EMAIL_REGEX = /\\A[\\w+\\-.]+@[a-z\\d\\-.]+\\.[a-z]+\\z/i","  validates :email, presence: true, length: { maximum: 255 },","                    format: { with: VALID_EMAIL_REGEX },","                    uniqueness: { case_sensitive: false }","  has_secure_password","end"],"id":10},{"start":{"row":0,"column":0},"end":{"row":9,"column":3},"action":"insert","lines":["class User < ApplicationRecord","  before_save { self.email = email.downcase }","  validates :name, presence: true, length: { maximum: 50 }","  VALID_EMAIL_REGEX = /\\A[\\w+\\-.]+@[a-z\\d\\-.]+\\.[a-z]+\\z/i","  validates :email, presence: true, length: { maximum: 255 },","                    format: { with: VALID_EMAIL_REGEX },","                    uniqueness: { case_sensitive: false }","  has_secure_password","  validates :password, presence: true, length: { minimum: 6 }","end"]}],[{"start":{"row":0,"column":0},"end":{"row":9,"column":3},"action":"remove","lines":["class User < ApplicationRecord","  before_save { self.email = email.downcase }","  validates :name, presence: true, length: { maximum: 50 }","  VALID_EMAIL_REGEX = /\\A[\\w+\\-.]+@[a-z\\d\\-.]+\\.[a-z]+\\z/i","  validates :email, presence: true, length: { maximum: 255 },","                    format: { with: VALID_EMAIL_REGEX },","                    uniqueness: { case_sensitive: false }","  has_secure_password","  validates :password, presence: true, length: { minimum: 6 }","end"],"id":11},{"start":{"row":0,"column":0},"end":{"row":16,"column":3},"action":"insert","lines":["class User < ApplicationRecord","  before_save { self.email = email.downcase }","  validates :name,  presence: true, length: { maximum: 50 }","  VALID_EMAIL_REGEX = /\\A[\\w+\\-.]+@[a-z\\d\\-.]+\\.[a-z]+\\z/i","  validates :email, presence: true, length: { maximum: 255 },","                    format: { with: VALID_EMAIL_REGEX },","                    uniqueness: { case_sensitive: false }","  has_secure_password","  validates :password, presence: true, length: { minimum: 6 }","","  # Returns the hash digest of the given string.","  def User.digest(string)","    cost = ActiveModel::SecurePassword.min_cost ? BCrypt::Engine::MIN_COST :","                                                  BCrypt::Engine.cost","    BCrypt::Password.create(string, cost: cost)","  end","end"]}],[{"start":{"row":0,"column":0},"end":{"row":16,"column":3},"action":"remove","lines":["class User < ApplicationRecord","  before_save { self.email = email.downcase }","  validates :name,  presence: true, length: { maximum: 50 }","  VALID_EMAIL_REGEX = /\\A[\\w+\\-.]+@[a-z\\d\\-.]+\\.[a-z]+\\z/i","  validates :email, presence: true, length: { maximum: 255 },","                    format: { with: VALID_EMAIL_REGEX },","                    uniqueness: { case_sensitive: false }","  has_secure_password","  validates :password, presence: true, length: { minimum: 6 }","","  # Returns the hash digest of the given string.","  def User.digest(string)","    cost = ActiveModel::SecurePassword.min_cost ? BCrypt::Engine::MIN_COST :","                                                  BCrypt::Engine.cost","    BCrypt::Password.create(string, cost: cost)","  end","end"],"id":12},{"start":{"row":0,"column":0},"end":{"row":21,"column":3},"action":"insert","lines":["class User < ApplicationRecord","  before_save { self.email = email.downcase }","  validates :name,  presence: true, length: { maximum: 50 }","  VALID_EMAIL_REGEX = /\\A[\\w+\\-.]+@[a-z\\d\\-.]+\\.[a-z]+\\z/i","  validates :email, presence: true, length: { maximum: 255 },","                    format: { with: VALID_EMAIL_REGEX },","                    uniqueness: { case_sensitive: false }","  has_secure_password","  validates :password, presence: true, length: { minimum: 6 }","","  # Returns the hash digest of the given string.","  def User.digest(string)","    cost = ActiveModel::SecurePassword.min_cost ? BCrypt::Engine::MIN_COST :","                                                  BCrypt::Engine.cost","    BCrypt::Password.create(string, cost: cost)","  end","","  # Returns a random token.","  def User.new_token","    SecureRandom.urlsafe_base64","  end","end"]}],[{"start":{"row":0,"column":0},"end":{"row":21,"column":3},"action":"remove","lines":["class User < ApplicationRecord","  before_save { self.email = email.downcase }","  validates :name,  presence: true, length: { maximum: 50 }","  VALID_EMAIL_REGEX = /\\A[\\w+\\-.]+@[a-z\\d\\-.]+\\.[a-z]+\\z/i","  validates :email, presence: true, length: { maximum: 255 },","                    format: { with: VALID_EMAIL_REGEX },","                    uniqueness: { case_sensitive: false }","  has_secure_password","  validates :password, presence: true, length: { minimum: 6 }","","  # Returns the hash digest of the given string.","  def User.digest(string)","    cost = ActiveModel::SecurePassword.min_cost ? BCrypt::Engine::MIN_COST :","                                                  BCrypt::Engine.cost","    BCrypt::Password.create(string, cost: cost)","  end","","  # Returns a random token.","  def User.new_token","    SecureRandom.urlsafe_base64","  end","end"],"id":13},{"start":{"row":0,"column":0},"end":{"row":28,"column":3},"action":"insert","lines":["class User < ApplicationRecord","  attr_accessor :remember_token","  before_save { self.email = email.downcase }","  validates :name,  presence: true, length: { maximum: 50 }","  VALID_EMAIL_REGEX = /\\A[\\w+\\-.]+@[a-z\\d\\-.]+\\.[a-z]+\\z/i","  validates :email, presence: true, length: { maximum: 255 },","                    format: { with: VALID_EMAIL_REGEX },","                    uniqueness: { case_sensitive: false }","  has_secure_password","  validates :password, presence: true, length: { minimum: 6 }","","  # Returns the hash digest of the given string.","  def User.digest(string)","    cost = ActiveModel::SecurePassword.min_cost ? BCrypt::Engine::MIN_COST :","                                                  BCrypt::Engine.cost","    BCrypt::Password.create(string, cost: cost)","  end","","  # Returns a random token.","  def User.new_token","    SecureRandom.urlsafe_base64","  end","","  # Remembers a user in the database for use in persistent sessions.","  def remember","    self.remember_token = User.new_token","    update_attribute(:remember_digest, User.digest(remember_token))","  end","end"]}],[{"start":{"row":21,"column":5},"end":{"row":22,"column":0},"action":"insert","lines":["",""],"id":14},{"start":{"row":22,"column":0},"end":{"row":22,"column":2},"action":"insert","lines":["  "]},{"start":{"row":22,"column":2},"end":{"row":23,"column":0},"action":"insert","lines":["",""]},{"start":{"row":23,"column":0},"end":{"row":23,"column":2},"action":"insert","lines":["  "]}],[{"start":{"row":23,"column":2},"end":{"row":33,"column":5},"action":"insert","lines":["# Returns the hash digest of the given string.","  def self.digest(string)","    cost = ActiveModel::SecurePassword.min_cost ? BCrypt::Engine::MIN_COST :","                                                  BCrypt::Engine.cost","    BCrypt::Password.create(string, cost: cost)","  end","","  # Returns a random token.","  def self.new_token","    SecureRandom.urlsafe_base64","  end"],"id":15}],[{"start":{"row":11,"column":2},"end":{"row":21,"column":5},"action":"remove","lines":["# Returns the hash digest of the given string.","  def User.digest(string)","    cost = ActiveModel::SecurePassword.min_cost ? BCrypt::Engine::MIN_COST :","                                                  BCrypt::Engine.cost","    BCrypt::Password.create(string, cost: cost)","  end","","  # Returns a random token.","  def User.new_token","    SecureRandom.urlsafe_base64","  end"],"id":16},{"start":{"row":11,"column":2},"end":{"row":22,"column":7},"action":"insert","lines":["class << self","    # Returns the hash digest of the given string.","    def digest(string)","      cost = ActiveModel::SecurePassword.min_cost ? BCrypt::Engine::MIN_COST :","                                                    BCrypt::Engine.cost","      BCrypt::Password.create(string, cost: cost)","    end","","    # Returns a random token.","    def new_token","      SecureRandom.urlsafe_base64","    end"]}],[{"start":{"row":0,"column":0},"end":{"row":41,"column":3},"action":"remove","lines":["class User < ApplicationRecord","  attr_accessor :remember_token","  before_save { self.email = email.downcase }","  validates :name,  presence: true, length: { maximum: 50 }","  VALID_EMAIL_REGEX = /\\A[\\w+\\-.]+@[a-z\\d\\-.]+\\.[a-z]+\\z/i","  validates :email, presence: true, length: { maximum: 255 },","                    format: { with: VALID_EMAIL_REGEX },","                    uniqueness: { case_sensitive: false }","  has_secure_password","  validates :password, presence: true, length: { minimum: 6 }","","  class << self","    # Returns the hash digest of the given string.","    def digest(string)","      cost = ActiveModel::SecurePassword.min_cost ? BCrypt::Engine::MIN_COST :","                                                    BCrypt::Engine.cost","      BCrypt::Password.create(string, cost: cost)","    end","","    # Returns a random token.","    def new_token","      SecureRandom.urlsafe_base64","    end","  ","  # Returns the hash digest of the given string.","  def self.digest(string)","    cost = ActiveModel::SecurePassword.min_cost ? BCrypt::Engine::MIN_COST :","                                                  BCrypt::Engine.cost","    BCrypt::Password.create(string, cost: cost)","  end","","  # Returns a random token.","  def self.new_token","    SecureRandom.urlsafe_base64","  end","","  # Remembers a user in the database for use in persistent sessions.","  def remember","    self.remember_token = User.new_token","    update_attribute(:remember_digest, User.digest(remember_token))","  end","end"],"id":17},{"start":{"row":0,"column":0},"end":{"row":33,"column":3},"action":"insert","lines":["class User < ApplicationRecord","  attr_accessor :remember_token","  before_save { self.email = email.downcase }","  validates :name,  presence: true, length: { maximum: 50 }","  VALID_EMAIL_REGEX = /\\A[\\w+\\-.]+@[a-z\\d\\-.]+\\.[a-z]+\\z/i","  validates :email, presence: true, length: { maximum: 255 },","                    format: { with: VALID_EMAIL_REGEX },","                    uniqueness: { case_sensitive: false }","  has_secure_password","  validates :password, presence: true, length: { minimum: 6 }","","  # Returns the hash digest of the given string.","  def User.digest(string)","    cost = ActiveModel::SecurePassword.min_cost ? BCrypt::Engine::MIN_COST :","                                                  BCrypt::Engine.cost","    BCrypt::Password.create(string, cost: cost)","  end","","  # Returns a random token.","  def User.new_token","    SecureRandom.urlsafe_base64","  end","","  # Remembers a user in the database for use in persistent sessions.","  def remember","    self.remember_token = User.new_token","    update_attribute(:remember_digest, User.digest(remember_token))","  end","","  # Returns true if the given token matches the digest.","  def authenticated?(remember_token)","    BCrypt::Password.new(remember_digest).is_password?(remember_token)","  end","end"]}],[{"start":{"row":0,"column":0},"end":{"row":33,"column":3},"action":"remove","lines":["class User < ApplicationRecord","  attr_accessor :remember_token","  before_save { self.email = email.downcase }","  validates :name,  presence: true, length: { maximum: 50 }","  VALID_EMAIL_REGEX = /\\A[\\w+\\-.]+@[a-z\\d\\-.]+\\.[a-z]+\\z/i","  validates :email, presence: true, length: { maximum: 255 },","                    format: { with: VALID_EMAIL_REGEX },","                    uniqueness: { case_sensitive: false }","  has_secure_password","  validates :password, presence: true, length: { minimum: 6 }","","  # Returns the hash digest of the given string.","  def User.digest(string)","    cost = ActiveModel::SecurePassword.min_cost ? BCrypt::Engine::MIN_COST :","                                                  BCrypt::Engine.cost","    BCrypt::Password.create(string, cost: cost)","  end","","  # Returns a random token.","  def User.new_token","    SecureRandom.urlsafe_base64","  end","","  # Remembers a user in the database for use in persistent sessions.","  def remember","    self.remember_token = User.new_token","    update_attribute(:remember_digest, User.digest(remember_token))","  end","","  # Returns true if the given token matches the digest.","  def authenticated?(remember_token)","    BCrypt::Password.new(remember_digest).is_password?(remember_token)","  end","end"],"id":18},{"start":{"row":0,"column":0},"end":{"row":39,"column":0},"action":"insert","lines":["class User < ApplicationRecord","  attr_accessor :remember_token","  before_save { self.email = email.downcase }","  validates :name,  presence: true, length: { maximum: 50 }","  VALID_EMAIL_REGEX = /\\A[\\w+\\-.]+@[a-z\\d\\-.]+\\.[a-z]+\\z/i","  validates :email, presence: true, length: { maximum: 255 },","                    format: { with: VALID_EMAIL_REGEX },","                    uniqueness: { case_sensitive: false }","  has_secure_password","  validates :password, presence: true, length: { minimum: 6 }","","  # Returns the hash digest of the given string.","  def User.digest(string)","    cost = ActiveModel::SecurePassword.min_cost ? BCrypt::Engine::MIN_COST :","                                                  BCrypt::Engine.cost","    BCrypt::Password.create(string, cost: cost)","  end","","  # Returns a random token.","  def User.new_token","    SecureRandom.urlsafe_base64","  end","","  # Remembers a user in the database for use in persistent sessions.","  def remember","    self.remember_token = User.new_token","    update_attribute(:remember_digest, User.digest(remember_token))","  end","","  # Returns true if the given token matches the digest.","  def authenticated?(remember_token)","    BCrypt::Password.new(remember_digest).is_password?(remember_token)","  end","","  # Forgets a user.","  def forget","    update_attribute(:remember_digest, nil)","  end","end",""]}],[{"start":{"row":30,"column":2},"end":{"row":38,"column":3},"action":"remove","lines":["def authenticated?(remember_token)","    BCrypt::Password.new(remember_digest).is_password?(remember_token)","  end","","  # Forgets a user.","  def forget","    update_attribute(:remember_digest, nil)","  end","end"],"id":19},{"start":{"row":30,"column":2},"end":{"row":39,"column":3},"action":"insert","lines":["def authenticated?(remember_token)","    return false if remember_digest.nil?","    BCrypt::Password.new(remember_digest).is_password?(remember_token)","  end","","  # Forgets a user.","  def forget","    update_attribute(:remember_digest, nil)","  end","end"]}],[{"start":{"row":9,"column":2},"end":{"row":9,"column":61},"action":"remove","lines":["validates :password, presence: true, length: { minimum: 6 }"],"id":20},{"start":{"row":9,"column":2},"end":{"row":9,"column":78},"action":"insert","lines":["validates :password, presence: true, length: { minimum: 6 }, allow_nil: true"]}]]},"ace":{"folds":[],"scrolltop":0,"scrollleft":0,"selection":{"start":{"row":9,"column":78},"end":{"row":9,"column":78},"isBackwards":false},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":0},"timestamp":1540775881241,"hash":"8f7a902a4b6ae7e8f9e2e1e99d43622d44824637"}